; The server section refers to configurations that apply to all HAPI servers regardless of the data driver
[server]
; A unique ID for the server. Ideally, this ID has the
; organization name in it, e.g., NASA/SPDF/SSCWeb,
; NASA/SPDF/CDAWeb, INTERMAGNET, UniversityIowa/VanAllen,
; LASP/TSI, etc.
server_id=Unspecified Server

; A short humanreadable name for the server . The suggested
; maximum length is 40 characters
server_name=Unspecified Name

; Contact information or email address for server issues.
; HAPI clients should show this contact information when it is certain
; that an error is due to a problem with the server (as opposed to the
; client). Ideally, a HAPI client will recommend that the user check their
; connection and try again at least once before contacting the server
; contact.
server_contact=Unspecified Contact

; A brief description of the type of data the server provides.
; server_description=Unspecified

; The identifier in the discovery system for information about
; the contact. For example, a SPASE ID of a person identified in the
; contact string.
; server_contact_id=Unspecified

; How to cite data server. An actionable DOI is preferred (e.g.,
; https://doi.org/...). This citation differs from the citation in an
; /info response. Here the citation is for the entity that maintains the
; data server.
; server_citation=Unspecified

; Enabling record limits sets a limit on how many records can be returned to the client.
; If the number of records to be returned exceeds the limits set by record_limit, then the server will return error 1408 - Too much data to the client.
; Note that this may increase the amount of time it takes to return data by requiring counting how much data will be returned before its returned.
; Possible values are true or false.
; For safety, unrecognized values will be treated as true.
enable_record_limit=true

; The maximum number of records to allow to be sent to the client during one query.
; Only applied if enable_record_limit is true.
; If this value is left out, but enable_record_limit is true, then 10,000 will be used as the default.
record_limit_ExampleDataset=1

; To specify the datasets used in the catalog use the format
; catalog[hapi_id]=description
catalog[ExampleDataset]=Example dataset for the PHP Hapi Server.
catalog[SubsetDataset]=This is a subset of ExmapleDataset

; HAPI doesn't specify any filtering capabilities.
; If you'd like to filter a big dataset into smaller subsets, then you can do that by specifying the subsets option
; The format is subsets[<Subset Name>]=<Parent Set Name>,<DB Column>,<Value>
; In the example below SubsetDataset is a subset of ExampleDataset where the database columb id = 3
; Subsets include all parent parameters including metaparameters
subsets[SubsetDataset]=ExampleDataset,id,3

; Specify the dataset's time parameter.
; This parameter will always be returned first in the parameters list and must be the first element in each record returned.
ExampleDataset_TimeParameter=timestamp

; You may specify data postprocessors here.
; Postprocessors are PHP classes that modify your data after it has been read from you data source, but before it's sent to the client.
; You can use postprocessors to merge columns, clean up values, or modify records however you like.
; Postprocessors are assigned to specific datasets by adding them to the config file in the form:
; <dataset>_postprocessor[]=ClassName.
; If your postprocessor doesn't rely on specific parameter names, then you could use it on multiple datasets.
; See src/Extension/Postprocessor.php and src/Extension/Exclamatator.php for examples
; Uncomment this to see an example. Exclamatator adds exclamation points to any strings sent to the client (including dates)
; ExampleDataset_postprocessors[]=Exclamatator
ExampleDataset_postprocessors[]=ExampleMetaparameter

; The backend data driver being used.
; Currently only MySQL is supported.
; This value is passed to PDO, in theory other database drivers supported by PDO will work, though it hasn't been tested.
; If you're interested in testing current support for other databases, update Database.php to use the existing MySQL PDO for your database driver.
; The concern is that some queries may or may not be specific to MySQL and other database drivers will need to be implemented, or at least have the MySQL driver extended.
; Also, per the design, the data driver doesn't necessarily need to be a database, though that's all that's currently implemented.
; One could implement (for example) a CLI driver and as long as the driver implements the DataRetrievalInterface, it will work with the rest of the application.
data_driver=mysql

;------------------------------------------------------------------;
; mysql driver specific parameters                                 ;
; this section only applies if you're using the mysql data driver. ;
;------------------------------------------------------------------;
[mysql]
; Database access information
dbhost=127.0.0.1
dbname=HapiTestDatabase
dbuser=HapiTestUser
dbpass=password

; Maps a dataset to a database table. Only needed if using a database driver as the data driver.
; This is not necessary if the datasetid is the same as the table name.
catalog_id_to_db_table[ExampleDataset]=TestDataset

; If you don't want to simply return your database columns as the parameters for your hapi server, then metaparameters are for you.
; Metaparameters leverage the extension interface to change how parameters are handled.
; The metaparameter works with 3 simple steps
; 1. Define the metaparameter by specifying which table columns are needed to build it, this ensures they're added to the generated query.
; 2. Write a postprocessor to add the parameter to your output
; 3. treat the metaparameter like a normal parameter in the remaining configuration sections.
; IMPORTANT NOTE: The columns specified here do not need to be in the column whitelist, but they will be returned in a data request.
;           It is up to you to remove them from the record when you create your metaparameter
ExampleDataset_metaparameters[example_metaparameter]=id,timestamp

; To automatically discover start/end dates for your dataset, you must specify the time column on the table
; format is <table>_TimeColumn=<column_name>
TestDataset_TimeColumn=timestamp

; The whitelist specifies whi_ch table columns you want to be served as parameters.
; If you need to use different column names as your parameters than the table names in your database, use metaparameters to map them to different names.
; Any columns not in the whitelist will not be served as parameters.
; Format is <table>_ColumnWhitelist[]=<column_name>
TestDataset_ColumnWhitelist[]=decimal_data
TestDataset_ColumnWhitelist[]=float_data
TestDataset_ColumnWhitelist[]=string_data
TestDataset_ColumnWhitelist[]=timestamp

; HAPI requires that you specify units for your values.
; The format as <dataset>_<parameter>_unit=The parameter's unit
ExampleDataset_decimal_data_unit=inches
ExampleDataset_float_data_unit=cm
ExampleDataset_string_data_unit=dimensionless
ExampleDataset_timestamp_unit=UTC
ExampleDataset_example_metaparameter_unit=dimensionless

; Metaparameters must have their type specified since it doesn't come directly from the database
ExampleDataset_example_metaparameter_type=string

; If a metaparameter is a string, you must specify an upper limit on its length.
; HAPI server requires a length on string types.
; You don't have to do this for normal database strings since the database will return the character limit on the column.
ExampleDataset_example_metaparameter_maxlength=100

; HAPI allows us to specify descriptions for each parameter.
; The format as <dataset>_<parameter>_description=The parameter's description
ExampleDataset_decimal_data_description=Decimal data test
ExampleDataset_float_data_description=Float data test
ExampleDataset_string_data_description="It's string data"
ExampleDataset_timestamp_description=Timestamp test data
ExampleDataset_example_metaparameter_description=I will be created from the timestamp and id columns of the database

; Specify timestamp locations here
; Timestamp location is an optional value, so any datasets without this will not return this parameter to users.
; timestampLocation[dataset]=center

; Specify cadence here
; Cadence is an optional value, so any datasets without this will not return this parameter to users.
; Must be in ISO 8601 format. See https://en.wikipedia.org/wiki/ISO_8601#Durations
; cadence[dataset]=PT5S

; Specify sample start dates here
; The sample dates wrap a set of dates that your dataset is guaranteed to have data for.
; sample start date is an optional value, so any datasets without this will not return this parameter to users.
; If you provide a sample start date, then you must provide a sample end date.
; Must be in Restricted ISO 8601 format. See section 3.7.6 of the HAPI Specification V3.1
sampleStartDate[ExampleDataset]=2022-01-01T00:00:00.000Z

; Specify sample end dates here
; The sample dates wrap a set of dates that your dataset is guaranteed to have data for.
; sample end date is an optional value, so any datasets without this will not return this parameter to users.
; If you provide a sample end date, then you must provide a sample start date.
; Must be in Restricted ISO 8601 format. See section 3.7.6 of the HAPI Specification V3.1
sampleStopDate[ExampleDataset]=2022-02-01T00:00:00.000Z

; Max request duration
; This specifies the largest start/stop duration that a user can query without breaking your server.
; This is optional for the HAPI spec, but required for this server.
; Setting this protects you from DoS attacks in case someone tries to query your entire dataset.
; If you really don't care, then you can set this to something like 2000 years.
; Defaults to 1 year if not set at all.
; Must be in ISO 8601 format. See https://en.wikipedia.org/wiki/ISO_8601#Durations
maxRequestDuration[ExampleDataset]=P2YT1S

; Specify dataset descriptions here
; Description is an optional value, so any datasets without this will not return this parameter to users.
description[ExampleDataset]=An example dataset prepared for testing the PHP Hapi Server
description[SubsetDataset]=Subset of ExampleDataset used for testing

; Specify units schemas for a dataset here.
; Unit Schema is an optional value, so any datasets without this will not return this parameter to users.
; unitsSchema[dataset]=astropy3

; Specify coordinate system schemas for a dataset here.
; Coordinate System Schema is an optional value, so any datasets without this will not return this parameter to users.
; coordinateSystemSchema[dataset]=astropy3

; Specify resourceURLs for a dataset here.
; resourceURL is an optional value, so any datasets without this will not return this parameter to users.
resourceURL[ExampleDataset]=TBD

; Specify resource ids for a dataset here.
; resource ID is an optional value, so any datasets without this will not return this parameter to users.
; resourceID[dataset]=spase id

; Specify the creation date of a dataset here.
; Creation date is an optional value, so any datasets without this will not return this parameter to users.
; Must be in Restricted ISO 8601 format. See section 3.7.6 of the HAPI Specification V3.1
; creationDate[dataset]=date

; Specify citations for a dataset here.
; Citation is an optional value, so any datasets without this will not return this parameter to users.
citation[ExampleDataset]=Daniel Garcia Briseno

; Specify latest modification date for a dataset here.
; Modification date is an optional value, so any datasets without this will not return this parameter to users.
; Must be in Restricted ISO 8601 format. See section 3.7.6 of the HAPI Specification V3.1
; modificationDate[dataset]=last modified date

; Specify contacts for specific datasets here.
; Contact is an optional value, so any datasets without this will not return this parameter to users.
contact[ExampleDataset]=daniel.garciabriseno@nasa.gov

; Specify contact ids for specific datasets here.
; ContactID is an optional value, so any datasets without this will not return this parameter to users.
; contactID[dataset]=dataset contact id